service: companies-ranking-app
variablesResolutionMode: 20210219
configValidationMode: error
plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  tracing:
    apiGateway: true
    lambda: true

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    JWKS_URL: ${opt:jwksUrl, 'https://chomnoue.auth0.com/.well-known/jwks.json'}
    COMPANIES_TABLE: Companies-${self:provider.stage}
    REVIEWS_TABLE: Reviews-${self:provider.stage}
    REVIEWS_CREATION_DATE_INDEX: CreatedAtIndex
    ATTACHMENTS_BUCKET: chomnoue-companies-ranking-attachments-${self:provider.stage}
    ES_ENDPOINT: !GetAtt CompaniesSearch.DomainEndpoint

custom:
  topicName: attachmentsTopic-${self:provider.stage}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetCompanies:
    handler: src/lambda/http/getCompanies.handler
    events:
      - http:
          method: get
          path: api/companies
          cors: true
          authorizer: Auth
    role: GetCompaniesRole

  GetCompany:
    handler: src/lambda/http/getCompany.handler
    events:
      - http:
          method: get
          path: api/companies/{companyId}
          cors: true
          authorizer: Auth
    role: GetCompanyRole

  CreateCompany:
    handler: src/lambda/http/createCompany.handler
    events:
      - http:
          method: post
          path: api/companies
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(requests/create_company.json)}
    role: CreateCompanyRole

  UpdateCompany:
    handler: src/lambda/http/updateCompany.handler
    events:
      - http:
          method: patch
          path: api/companies/{companyId}
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(requests/update_company.json)}
    role: UpdateCompanyRole

  DeleteCompany:
    handler: src/lambda/http/deleteCompany.handler
    events:
      - http:
          method: delete
          path: api/companies/{companyId}
          cors: true
          authorizer: Auth
    role: DeleteCompanyRole

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: api/companies/{companyId}/attachment
          cors: true
          authorizer: Auth
    role: GenerateUploadUrlRole

  GetReviews:
    handler: src/lambda/http/getReviews.handler
    events:
      - http:
          method: get
          path: api/companies/{companyId}/reviews
          cors: true
          authorizer: Auth
    role: GetReviewsRole

  GetReview:
    handler: src/lambda/http/getReview.handler
    events:
      - http:
          method: get
          path: api/companies/{companyId}/review
          cors: true
          authorizer: Auth
    role: GetReviewRole

  CreateReview:
    handler: src/lambda/http/createReview.handler
    events:
      - http:
          method: post
          path: api/companies/{companyId}/reviews
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(requests/review.json)}
    role: CreateReviewRole

  UpdateReview:
    handler: src/lambda/http/updateReview.handler
    events:
      - http:
          method: patch
          path: api/companies/{companyId}/reviews
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(requests/review.json)}
    role: UpdateReviewRole

  DeleteReview:
    handler: src/lambda/http/deleteReview.handler
    events:
      - http:
          method: delete
          path: api/companies/{companyId}/reviews
          cors: true
          authorizer: Auth
    role: DeleteReviewRole

  SyncCompaniesWithElasticsearch:
    environment:
      ES_ENDPOINT: !GetAtt CompaniesSearch.DomainEndpoint
    handler: src/lambda/dynamoDb/elasticSearchSync.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [CompaniesDynamoDBTable, StreamArn]
    role: CompaniesSearchSyncRole

  AddImageToCompany:
    handler: src/lambda/s3/addImageToCompany.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}
    role: CompaniesImagesSyncRole

  InitResources:
    handler: src/lambda/init/initResources.handler
    role: InitResourcesRole
    environment:
      ES_ENDPOINT: !GetAtt CompaniesSearch.DomainEndpoint

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    CompaniesDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: companyId
            AttributeType: S
        KeySchema:
          - AttributeName: companyId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.COMPANIES_TABLE}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    ReviewsDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: companyId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: companyId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.REVIEWS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.REVIEWS_CREATION_DATE_INDEX}
            KeySchema:
              - AttributeName: companyId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref AttachmentsTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref AttachmentsTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}
        Topics:
          - !Ref AttachmentsTopic

    AttachmentsTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: attachment bucket topic
        TopicName: ${self:custom.topicName}

    GetCompaniesRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument: &assumeRolePolicyDocument
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: getCompaniesPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - &logsStatement
                  Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        -
                          - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - &xrayStatement
                  Effect: "Allow" # xray permissions (required)
                  Action:
                    - "xray:PutTraceSegments"
                    - "xray:PutTelemetryRecords"
                  Resource:
                    - "*"
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*

    GetCompanyRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument: *assumeRolePolicyDocument
        Policies:
          - PolicyName: getCompanyPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - *logsStatement
                - *xrayStatement
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMPANIES_TABLE}
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*

    CreateCompanyRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument: *assumeRolePolicyDocument
        Policies:
          - PolicyName: createCompanyPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - *logsStatement
                - *xrayStatement
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMPANIES_TABLE}

    UpdateCompanyRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument: *assumeRolePolicyDocument
        Policies:
          - PolicyName: updateCompanyPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - *logsStatement
                - *xrayStatement
                - Effect: Allow
                  Action:
                    - dynamodb:UpdateItem
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMPANIES_TABLE}

    DeleteCompanyRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument: *assumeRolePolicyDocument
        Policies:
          - PolicyName: deleteCompanyPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - *logsStatement
                - *xrayStatement
                - Effect: Allow
                  Action:
                    - dynamodb:DeleteItem
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMPANIES_TABLE}

    GenerateUploadUrlRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument: *assumeRolePolicyDocument
        Policies:
          - PolicyName: generateUploadUrlPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - *logsStatement
                - *xrayStatement
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:GetObject
                  Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*

    GetReviewsRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument: *assumeRolePolicyDocument
        Policies:
          - PolicyName: getReviewsPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - *logsStatement
                - *xrayStatement
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                  Resource:
                    - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}/index/${self:provider.environment.REVIEWS_CREATION_DATE_INDEX}

    GetReviewRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument: *assumeRolePolicyDocument
        Policies:
          - PolicyName: getReviewPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - *logsStatement
                - *xrayStatement
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}

    CreateReviewRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument: *assumeRolePolicyDocument
        Policies:
          - PolicyName: createReviewPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - *logsStatement
                - *xrayStatement
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                    - dynamodb:GetItem
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}
                - Effect: Allow
                  Action:
                    - dynamodb:UpdateItem
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMPANIES_TABLE}

    UpdateReviewRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument: *assumeRolePolicyDocument
        Policies:
          - PolicyName: updateReviewPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - *logsStatement
                - *xrayStatement
                - Effect: Allow
                  Action:
                    - dynamodb:UpdateItem
                    - dynamodb:GetItem
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}
                - Effect: Allow
                  Action:
                    - dynamodb:UpdateItem
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMPANIES_TABLE}

    DeleteReviewRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument: *assumeRolePolicyDocument
        Policies:
          - PolicyName: deleteReviewPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - *logsStatement
                - *xrayStatement
                - Effect: Allow
                  Action:
                    - dynamodb:DeleteItem
                    - dynamodb:GetItem
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}
                - Effect: Allow
                  Action:
                    - dynamodb:UpdateItem
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMPANIES_TABLE}

    CompaniesSearchSyncRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument: *assumeRolePolicyDocument
        Policies:
          - PolicyName: companiesSearchSyncPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - *logsStatement
                - *xrayStatement
                - Effect: Allow
                  Action:
                    - dynamodb:GetRecords
                    - dynamodb:GetShardIterator
                    - dynamodb:DescribeStream
                    - dynamodb:ListShards
                    - dynamodb:ListStreams
                  Resource:
                    Fn::GetAtt: [CompaniesDynamoDBTable, StreamArn]

    CompaniesImagesSyncRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument: *assumeRolePolicyDocument
        Policies:
          - PolicyName: companiesImageSyncPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - *logsStatement
                - *xrayStatement
                - Effect: Allow
                  Action:
                    - dynamodb:UpdateItem
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMPANIES_TABLE}


    InitResourcesRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument: *assumeRolePolicyDocument
        Policies:
          - PolicyName: initResourcesPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - *logsStatement
                - *xrayStatement


    CompaniesSearch:
      Type: AWS::Elasticsearch::Domain
      Properties:
        ElasticsearchVersion: '6.3'
        DomainName: companies-search-${self:provider.stage}
        ElasticsearchClusterConfig:
          DedicatedMasterEnabled: false
          InstanceCount: '1'
          ZoneAwarenessEnabled: false
          InstanceType: t2.small.elasticsearch
        EBSOptions:
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: 'gp2'

        AccessPolicies:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS: !GetAtt CompaniesSearchSyncRole.Arn
              Action: 'es:*'
              Resource: &companiesSearchResource
                - 'Fn::Join':
                    - ':'
                    -
                      - 'arn:aws:es'
                      - Ref: 'AWS::Region'
                      - Ref: 'AWS::AccountId'
                      - 'domain/companies-search-${self:provider.stage}/*'
            - Effect: Allow
              Principal:
                AWS: !GetAtt GetCompaniesRole.Arn
              Action: 'es:*'
              Resource: *companiesSearchResource
            - Effect: Allow
              Principal:
                AWS: !GetAtt GetCompanyRole.Arn
              Action: 'es:*'
              Resource: *companiesSearchResource
            - Effect: Allow
              Principal:
                AWS: !GetAtt InitResourcesRole.Arn
              Action: 'es:*'
              Resource: *companiesSearchResource
